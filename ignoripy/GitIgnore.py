from __future__ import print_function
from __future__ import unicode_literals
from __future__ import absolute_import
import re
import requests
from future.utils import raise_from
from future.utils import raise_with_traceback

class GitIgnore(object):
    """
    Handles communication with https://gitignore.io and returns
    the response.

    Available API's at https://gitignore.io,

    1) /api/list - list all possible languages or ide's (comma separated)
    2) /api/<language> - get a .gitignore for <language>
                        (language can be comma separated)

        :param object: Base class
    """
    def __init__(self, url, language):
        """
        Initialize GitIgnore instance

            :param self: GitIgnore instance
            :param url: API endpoint
            :param language: Language to generate .gitignore for
        """
        self.url = url
        self.language = language
        self.error_pattern = re.compile(r"#!! ERROR: (?P<lang>\w+)")

    def get(self):
        """
        Calls https://gitignore.io/api/<language> and returns
        .gitignore

            :param self: GitIgnore instance
            
            :return: Returns gitignore from api
            :rtype: str
        """
        try:
            response = requests.get(self.url + "/" + self.language)

            if response.status_code != 200:
                raise requests.RequestException(response.content)
            else:
                match = self.error_pattern.search(response.content)

                if match:
                    lang = match.groupdict().get("lang")
                    raise_with_traceback(GitIgnoreError("`{0}` doesn't have a gitignore".format(lang)))

            return response.content
        except requests.RequestException as req_exp:
            raise_from(GitIgnoreError("Error occurred getting .gitignore"), req_exp)

class GitIgnoreError(Exception):
    """
    Wraps errors generated by `GitIgnore`

        :param Exception: Base class
    """
    pass            